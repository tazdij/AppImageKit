#! /bin/bash

########################
# build runtime script #
########################
#
# template to be configured by the CMake build system

if which clang >/dev/null; then
    CC=clang
else
    CC=gcc
fi

STRIP=strip

set -xe

build_dir=$(mktemp -d)
orig_cwd=$(pwd)
repo_root="@CMAKE_CURRENT_SOURCE_DIR@"

# TODO: check whether those options are needed for other tools' build processes
small_FLAGS="-Os -ffunction-sections -fdata-sections"
small_LDFLAGS="-s -Wl,--gc-sections"

if [ "@APPIMAGEKIT_RUNTIME_ENABLE_SETPROCTITLE@" == "ON" ]; then
    small_FLAGS="$SMALL_FLAGS -DENABLE_SETPROCTITLE"
    small_LDFLAGS="$SMALL_LDFLAGS -lbsd"
fi

cd $repo_root
git_version="@GIT_COMMIT@"

cleanup() {
    [ -d $build_dir ] && rm -r "$build_dir"
}

trap cleanup EXIT

cd "$build_dir"

# Compile runtime but do not link
$CC -DGIT_COMMIT=\"$git_version\" -I"@xz_INCLUDE_DIRS@" -I"@squashfuse_INCLUDE_DIRS@" \
    -D_FILE_OFFSET_BITS=64 -g $small_FLAGS -c "$repo_root"/runtime.c

# Prepare 16 bytes of space for MD5 digest section
printf '\0%.0s' {0..1023} > 16_blank_bytes
objcopy --add-section .digest_md5=16_blank_bytes \
        --set-section-flags .digest_md5=noload,readonly runtime.o runtime1.o

# Prepare 1024 bytes of space for update information section
printf '\0%.0s' {0..1023} > 1024_blank_bytes

objcopy --add-section .upd_info=1024_blank_bytes \
        --set-section-flags .upd_info=noload,readonly runtime1.o runtime2.o

objcopy --add-section .sha256_sig=1024_blank_bytes \
        --set-section-flags .sha256_sig=noload,readonly runtime2.o runtime3.o

# prepare 8192 bytes of space for key section
cat 1024_blank_bytes 1024_blank_bytes 1024_blank_bytes 1024_blank_bytes > 4096_blank_bytes
cat 4096_blank_bytes 4096_blank_bytes > 8192_blank_bytes

objcopy --add-section .sig_key=8192_blank_bytes \
        --set-section-flags .sig_key=noload,readonly runtime3.o runtime4.o

# Now statically link against libsquashfuse_ll, libsquashfuse and liblzma
# and embed .upd_info and .sha256_sig sections
# TODO: squashfuse_LIBRARIES is a semicolon separated list of values that has to be split during runtime of this script
squashfuse_libs="@squashfuse_LIBRARIES@"
$CC $small_FLAGS $small_LDFLAGS -o runtime "$repo_root"/elf.c "$repo_root"/notify.c "$repo_root"/getsection.c \
    runtime4.o ${squashfuse_libs//;/ } \
    -Wl,-Bdynamic -lpthread -l"@libzlib_LIBRARIES@" -L"@libzlib_LIBRARY_DIRS@" -Wl,-Bstatic "@xz_LIBRARIES@" -Wl,-Bdynamic -ldl
$STRIP runtime

# Test if we can read it back
readelf -x .upd_info runtime # hexdump
readelf -p .upd_info runtime || true # string

# The raw updateinformation data can be read out manually like this:
HEXOFFSET=$(objdump -h runtime | grep .upd_info | awk '{print $6}')
HEXLENGTH=$(objdump -h runtime | grep .upd_info | awk '{print $3}')
dd bs=1 if=runtime skip=$(($(echo 0x$HEXOFFSET)+0)) count=$(($(echo 0x$HEXLENGTH)+0)) | xxd

# Insert AppImage magic bytes
if [ "@APPIMAGEKIT_EMBED_MAGIC_BYTES@" == "ON" ]; then
    printf '\x41\x49\x02' | dd of=runtime bs=1 seek=8 count=3 conv=notrunc
fi

# Convert runtime into a data object that can be embedded into appimagetool
ld -r -b binary -o data.o runtime

# Show header for debugging purposes
xxd runtime | head -n 1

cp runtime data.o "$orig_cwd"
